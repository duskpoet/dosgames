{"version":3,"sources":["oops/messages.cljs"],"mappings":"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","names":["oops.messages/post-process-message","msg","js/oops","js/oops.messages","js/oops.messages.runtime-message","method-table__4672__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4673__auto__","method-cache__4674__auto__","cached-hierarchy__4675__auto__","hierarchy__4676__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__26819","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","oops.messages/runtime-message","type","_","_type","info","map__26820","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","flavor","path","cljs.core/empty?","map__26822","soft?","fn","goog/typeOf","map__26824","key","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","map__26832","frozen?","map__26834","map__26836"],"sourcesContent":["(ns oops.messages\n  \"A subsystem for printing runtime warnings and errors.\"\n  (:require-macros [oops.messages]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic post-process-message [msg]\n  (str (oops.messages/gen-oops-message-prefix) \", \" msg))\n\n; -- runtime error/warning messages -----------------------------------------------------------------------------------------\n\n(defmulti runtime-message (fn [type & _] type))\n\n(defmethod runtime-message :unexpected-object-value [_type info]\n  (let [{:keys [flavor path]} info]\n    (post-process-message (str \"Unexpected object value (\" flavor \")\"\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :expected-function-value [_type info]\n  (let [{:keys [soft? path fn]} info]\n    (post-process-message (str \"Expected a function\"\n                               (when soft? (str \" or nil\"))\n                               (when-not (empty? path) (str \" on key path '\" path \"'\"))\n                               \", got <\" (goog/typeOf fn) \"> instead\"))))\n\n(defmethod runtime-message :missing-object-key [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Missing expected object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))))))\n\n(defmethod runtime-message :object-key-not-writable [_type info]\n  (let [{:keys [key path frozen?]} info]\n    (post-process-message (str \"Object key '\" key \"' is not writable\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               (when frozen? (str \" because the object is frozen\"))))))\n\n(defmethod runtime-message :object-is-sealed [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is sealed\"))))\n\n(defmethod runtime-message :object-is-frozen [_type info]\n  (let [{:keys [key path]} info]\n    (post-process-message (str \"Cannot create object key '\" key \"'\"\n                               (when-not (or (empty? path) (= path key)) (str \" on key path '\" path \"'\"))\n                               \" because the object is frozen\"))))\n\n(defmethod runtime-message :invalid-selector [_type]\n  (post-process-message \"Invalid selector\"))\n\n(defmethod runtime-message :unexpected-empty-selector [_type]\n  (post-process-message (str \"Unexpected empty selector\")))\n\n(defmethod runtime-message :unexpected-punching-selector [_type]\n  (post-process-message (str \"Unexpected punching selector (\\\"!\\\" makes sense only with oset!)\")))\n\n(defmethod runtime-message :unexpected-soft-selector [_type]\n  (post-process-message (str \"Unexpected soft selector (\\\"?\\\" does not make sense with oset!)\")))\n"]}